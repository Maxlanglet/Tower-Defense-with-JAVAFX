@startuml
'Ces diagrammes n'ont pas été généré automatiquement mais c'est moi même qui ait coder '
'ces diagrammes'
!define DARKBLUE
!includeurl https://raw.githubusercontent.com/Drakemor/RedDress-PlantUML/master/style.puml
' your UML '
scale 0.4

TowerInterface <|-- TowerInterfaceWithClosest

Tower <|- baseTower

Tower <|- missileTower

Tower <|- magicTower

TowerInterfaceWithClosest <|... missileTower
TowerInterfaceWithClosest <|... baseTower
TowerInterface <|... magicTower


magicTower <|-- magicTower1
magicTower <|-- magicTower2
EndBranchTowers <|.. magicTower1
EndBranchTowers <|.. magicTower2
baseTower <|-- baseTower1
baseTower <|-- baseTower2
EndBranchTowers <|. baseTower1
EndBranchTowers <|. baseTower2
missileTower <|-- missileTower1
missileTower <|-- missileTower2
EndBranchTowers <|. missileTower1
EndBranchTowers <|. missileTower2

Projectile <|-- Bullet
Projectile <|-- Missile

baseTower1 *--"*" Bullet
baseTower2 *--"*" Bullet
magicTower1 *--"*" Bullet
magicTower2 *--"*" Bullet

missileTower1 *--"*" Missile
missileTower2 *--"*" Missile

interface TowerInterface <<I>> {
    isInRange() : boolean
    findClosestEnemy()
    setRotation()
    update()
    upgrade()
    towerDead()
    fire()
}

interface TowerInterfaceWithClosest <<I>> {
    isInRange() : boolean
    findClosestEnemy()
    setRotation()
    update()
    upgrade()
    towerDead()
    fire()
}

abstract class Tower{
    # distance : double
    # dammage : double
    # positionX : double
    # positionY : double
    # gridPosX : int
    # gridPosY : int
    # base : ImageView
    # canon : ImageView
    # canonUp : ArrayList<ImageView>
    # upgraded : int
    # pnjs : ArrayList<PNJ>
    # rotation : double
    # towerDead : boolean
    # isPause : boolean
    # root : StackPane
    # projectiles : ArrayList<Projectile>
    # closestPnj : PNJ
    # pnjsInRadius : ArrayList<PNJ>
    "constructor" Tower(pnjs : ArrayList<PNJ>, positionX : double, positionY : double, gridPosX : int
    , gridPosY : int, root : StackPane, bool : boolean)
    + towerDead()
    + clearProjectile()
    + clearPNJ()
    + upgrade()
    + costUpgrade()
}


abstract class baseTower{
    # base_damage : double
    # dammage : double
    # rate_of_fire : double
    # range : double
    # projectileColor : Color
    - closestPnj : PNJ
    "constructor" baseTower(ArrayList<PNJ> pnjs, double positionX, double positionY, int gridPosX
        , int gridPosY, StackPane root, boolean bool)
    + findClosestEnemy()
    + setRotation()
    + isInRange() : boolean
    + fire()
    + update()
    + towerDead()
}

abstract class missileTower{
    # base_damage : double
    # dammage : double
    # rate_of_fire : int
    # indicator : int
    # range : double
    # blastRadius : double
    - closestPnj : PNJ
    # pnjsInRadius : ArrayList<PNJ>
    # missiles : ArrayList<ImageView>
    - ArrayList<PNJ> inRangePNJ;
    "constructor" missileTower(ArrayList<PNJ> pnjs, double positionX, double positionY, int gridPosX
        , int gridPosY, StackPane root, boolean bool)
    + isInRange() : boolean
    + findClosestEnemy()
    + setRotation()
    + towerDead()
    + update()
    + fire()
    + inBlastRadius()
    - clearBlastRadius()
}

abstract class magicTower{
    # base_damage : double
    # dammage : double
    # rate_of_fire : double
    - rate : int
    # rate_max : int
    # max_pnj : int
    # range : double
    # projectileColor : Color
    "constructor" magicTower(pnjs : ArrayList<PNJ>, positionX : double, positionY : double, gridPosX : int
    , gridPosY : int, root : StackPane, bool : boolean)
    + distanceEnemy(PNJ pnj)
    + isInRange(PNJ pnj) : boolean
    + fire()
    + setRotation()
    + upgrade()
    + towerDead()
    # update()

}

class magicTower1{
    "constructor" magicTower(pnjs : ArrayList<PNJ>, positionX : double, positionY : double, gridPosX : int
        , gridPosY : int, root : StackPane, bool : boolean)
    + costUpgrade() : int
    + upgrade()
}

class magicTower2{
    "constructor" magicTower(pnjs : ArrayList<PNJ>, positionX : double, positionY : double, gridPosX : int
        , gridPosY : int, root : StackPane, bool : boolean)
    + costUpgrade() : int
    + upgrade()
}

class missileTower1{
    "constructor" missileTower1(ArrayList<PNJ> pnjs, double positionX, double positionY, int gridPosX
        , int gridPosY, StackPane root, boolean bool)
    + upgrade()
    + costUpgrade() : int
}

class missileTower2{
    "constructor" missileTower1(ArrayList<PNJ> pnjs, double positionX, double positionY, int gridPosX
        , int gridPosY, StackPane root, boolean bool)
    + upgrade()
    + costUpgrade() : int
}


class baseTower1{
    "constructor" baseTower1(pnjs : ArrayList<PNJ>, positionX : double, positionY : double, gridPosX : int
            , gridPosY : int, root : StackPane, bool : boolean)
    + costUpgrade() : int
    + upgrade()
}

class baseTower2{
    "constructor" baseTower2(pnjs : ArrayList<PNJ>, positionX : double, positionY : double, gridPosX : int
            , gridPosY : int, root : StackPane, bool : boolean)
    + costUpgrade() : int
    + upgrade()
}

interface EndBranchTowers <<I>>{
    upgrade()
    costUpgrade() : int
}

abstract class Projectile{
    # posTowX : double
    # posTowY : double
    # posPNJX : double
    # posPNJY : double
    # trajectoire : Path
    # animation : PathTransition
    # distanceParcourue : double
    # root : StackPane
    # tower : Tower
    # bullet : Ellipse
    "constructor" Projectile(positionX : double, positionY : double, PNJX : double, PNJY : double, root : StackPane, tower : Tower)
    + setOpacity(i : int)
    + setRadius(radius : int)
    + setPause()
    + setPlay()
}

class Bullet{
    - bullet : Ellipse
    "constructor" Bullet(positionX : double, positionY : double, PNJX : double, PNJY : double, root : StackPane, tower : Tower, color : Color)
    - update()
    - distance() : double
    - distance(finX : double, finY : double) : double
    - apparition()
    + setOpacity(i : int)
}

class Missile{
    - missile : ImageView
    "constructor" Missile(positionX : double, positionY : double, PNJX : double, PNJY : double, root : StackPane, tower : Tower, missile : ImageView)
    + setOpacity(i : int)
}

@enduml